"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import ast
import json
import logging
import os
from pathlib import Path

import sentry_sdk
from corsheaders.defaults import default_headers
from dotenv import load_dotenv
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.threading import ThreadingIntegration

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")
RELEASE_ENVIRONMENT = os.environ["RELEASE_ENVIRONMENT"]
DEBUG = ast.literal_eval(os.environ["DEBUG"])
DEFAULT_DOMAIN = os.environ["DEFAULT_DOMAIN"]
# To be used for links directing to the GH credentials phishing page,
# regardless of us wrapping it in a fake link by <a> tags or whatnot.
GITHUB_PHISHING_DOMAIN = {
    "PROD": "github-actions.com",
}.get(RELEASE_ENVIRONMENT, DEFAULT_DOMAIN)

ALLOWED_HOSTS = ["*"]
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_HEADERS = list(default_headers) + ["Content-Disposition"]
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
SECURE_SSL_REDIRECT = not DEBUG


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "core",
    "rest_framework",
    "rest_framework_api_key",
    "drf_spectacular",
    "django_extensions",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework_api_key.permissions.HasAPIKey",
    ],
    "EXCEPTION_HANDLER": "app.middleware.custom_exception_handler",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "AttackService docs",
    "VERSION": "0.1.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SERVE_PERMISSIONS": ["rest_framework.permissions.IsAdminUser"],
    "ENUM_NAME_OVERRIDES": {
        "AttackStatus": "core.models.AttackStatus",
    },
}

ROOT_URLCONF = "app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "app.wsgi.application"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": " - ".join(
                [
                    "%(asctime)s",
                    "%(levelname)s",
                    "funcname=%(funcName)s",
                    "lineno=%(lineno)s",
                    "%(message)s",
                ]
            ),
        },
        "simple": {"format": "%(levelname)s %(message)s"},
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "verbose"},
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "server": {
            "handlers": ["console"],
            "level": os.getenv("LOG_LEVEL", "DEBUG"),
            "propagate": True,
        },
        # Will log all SQL queries. Nice for debugging.
        # "django.db.backends": {
        #     "level": "DEBUG",
        #     "handlers": ["console"],
        # },
    },
}


#  Database connectivity.
# NOTE: We use transaction connection pooling for Supabase and possibly
# handle large amounts of data through a server-side cursor. To support
# server-side cursors together with AUTOCOMMIT=True, we need to make
# sure every QuerySet.iterator() is in an atomic() block.
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
# https://docs.djangoproject.com/en/4.1/ref/databases/#transaction-pooling-and-server-side-cursors

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "postgres",
        "HOST": os.getenv("DB_HOST"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "PORT": 5432,
        "USER": "postgres",
        "CERT": os.getenv("DB_CERT"),
        "OPTIONS": {
            "sslmode": "require"
            if os.getenv("DB_HOST", "").startswith("localhost") is not True
            else None
        },
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # noqa
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Emails

EMAIL_HOST = "smtp.sendgrid.net"
# This is exactly the value "apikey", not an error or a placeholder.
EMAIL_HOST_USER = "apikey"
DEFAULT_FROM_EMAIL = "support@orchest.io"
SERVER_EMAIL = "support@orchest.io"
EMAIL_HOST_PASSWORD = os.environ["SENDGRID_API_KEY"]
SENDGRID_API_KEY = os.environ["SENDGRID_API_KEY"]
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_BACKEND = "sendgrid_backend.SendgridBackend"
# Do not send emails on debug mode.
SENDGRID_SANDBOX_MODE_IN_DEBUG = False
# Echo the email content to stdout.
SENDGRID_ECHO_TO_STDOUT = False

COMMON_GMAIL_EMAIL_ADDRESS_1 = os.environ["COMMON_GMAIL_EMAIL_ADDRESS_1"]
COMMON_GMAIL_EMAIL_PSW_1 = os.environ["COMMON_GMAIL_EMAIL_PSW_1"]

COMMON_GMAIL_EMAIL_ADDRESSES = {
    COMMON_GMAIL_EMAIL_ADDRESS_1,
}

COMMON_GMAIL_EMAIL_ADDRESS_TO_PSWDS = {
    COMMON_GMAIL_EMAIL_ADDRESS_1: COMMON_GMAIL_EMAIL_PSW_1,
}

# For whitelisting emails by header. Currently unused.
MOLESEC_PHISHING_EMAIL_HEADER = "X-MoleSec-Phi-Test"

# This a domain that we have setup with mailgun to send emails. This
# should be used when bypassing checks (i.e. email insertion) is not
# possible and the attack service wants to send an email that looks like
# a personal email from a generic sounding email provider.
LEGIT_SOUNDING_EMAIL_PROVIDER = "proto-mail.com"
MAILGUN_API_KEY = os.environ["MAILGUN_API_KEY"]

# Credentials for the GPC GMail service account used for email insertion
# for addressed belonging to a workspace which domain has been delegated
# with us.
GCP_GMAIL_SERVICE_KEY = json.loads(os.environ["GCP_GMAIL_SERVICE_KEY"])

# Profile data
PROFILE_DATA_URL = os.environ["PROFILE_DATA_URL"]
PROFILE_DATA_API_KEY = os.environ["PROFILE_DATA_API_KEY"]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Scheduler

USE_SCHEDULER = True
SCHEDULER_LOG_LEVEL = logging.WARNING

# Slack

SLACK_TOKEN = os.environ["SLACK_TOKEN"]

if DEBUG:
    print("DEBUG mode: redirecting artifact review requests to stdout.")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
# See http://whitenoise.evans.io/en/stable/
# http://whitenoise.evans.io/en/stable/django.html
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Sentry configuration

sentry_sdk.init(
    dsn=os.environ.get("SENTRY_DSN", default=""),
    integrations=[DjangoIntegration(), ThreadingIntegration(propagate_hub=True)],
    environment=os.environ["RELEASE_ENVIRONMENT"],
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=0.2,
    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True,
)

# End sentry configuration
